<?php

/**
 * @file
 * Functions to support theming in the beliana theme.
 */

use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function beliana_preprocess_html(&$variables) {
  $config = Drupal::config('matomo.settings');
  $variables['matomo'] = ['site_id' => $config->get('matomo_site_id', 1)];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function beliana_preprocess_region(&$variables) {
  if (in_array($variables['region'], ['footer_left', 'footer_center'])) {
    $variables['attributes']['class'][] = str_replace('_', '-', $variables['region']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function beliana_preprocess_media(&$variables) {
  $media = $variables['elements']['#media'];
  $entity_ids = Drupal::service('entity.query')->get('node')
    ->condition('type', 'word')
    ->condition('field_images', [$media->id()], 'IN')
    ->execute();

  if (!empty($entity_ids)) {
    $variables['node'] = Drupal::entityManager()
      ->getStorage('node')
      ->load(reset($entity_ids));
    $variables['back_url'] = Url::fromRoute('entity.node.canonical', ['node' => $variables['node']->id()], ['absolute' => 'true'])
      ->toString();
  }
}

/**
 * Implements template_preprocess_views_view().
 */
function beliana_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $variables['label'] = ['#markup' => $view->getTitle()];

  if (in_array($view->id(), [
    'most_visited_content',
    'content_recent',
    'today',
  ])) {
    $variables['#attached']['library'][] = 'cool/facets';
  }
}

/**
 * Implements template_preprocess_facets_item_list().
 */
function beliana_preprocess_facets_item_list(&$variables) {
  if (!empty($variables['facet'])) {
    switch ($variables['facet']->id()) {
      case 'alphabet':
        foreach ($variables['items'] as &$item) {
          $options = $item['value']['#url']->getOptions();

          // remove search text query from facet link
          if (isset($options['query']['text'])) {
            unset($options['query']['text']);
          }

          $item['value']['#url']->setOptions($options);
        }
        break;
      case 'kategorie':
        foreach ($variables['items'] as &$item) {
          $collapse = TRUE;

          //          if(isset($item['value']['#attributes']['class'])){
          //            if($item['value']['#attributes']['class'][0] == 'is-active'){
          //              $item['attributes']->addClass('facet-item--active');
          //              $collapse = FALSE;
          //            }
          //          }

          if ($item['attributes']->hasClass('facet-item--expanded') && !$item['attributes']->hasClass('facet-item--active-trail') && $collapse) {
            $item['attributes']->removeClass('facet-item--expanded');
            $item['attributes']->addClass('facet-item--collapsed');
          }
        }
        break;
    }
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function beliana_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

function beliana_theme_suggestions_image_alter(array &$suggestions, array &$variables) {
  if (($node = Drupal::routeMatch()->getParameter('node')) && $node instanceof NodeInterface) {
    if ($node->getType() === 'word') {
      $suggestions[] = 'image__' . $node->getType();
      $mid = $node->field_images->target_id;
      if (empty(Media::load($mid)->field_image->getValue())) {
        $variables["alt"] = $node->getTitle();
        $variables["attributes"]["alt"] = $node->getTitle();
      }
    }
  }
  if (($media = Drupal::routeMatch()->getParameter('media')) && $media instanceof MediaInterface) {
    if (empty($media->field_image->getValue())) {
      $variables["alt"] = $media->field_nazov_diela->value;
      $variables["attributes"]["alt"] = $media->field_nazov_diela->value;
    }
  }
}
