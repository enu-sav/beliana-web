<?php
/**
 * @file
 * Contains beliana_base.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\media\Entity\Media;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_page_attachments_alter().
 */
function beliana_base_page_attachments_alter(array &$attachments): void {
  if (in_array('mathjax/source', $attachments['#attached']['library'])) {
    $index = array_search('mathjax/source', $attachments['#attached']['library']);
    unset($attachments['#attached']['library'][$index]);
  }
  if (in_array('mathjax/setup', $attachments['#attached']['library'])) {
    $index = array_search('mathjax/setup', $attachments['#attached']['library']);
    unset($attachments['#attached']['library'][$index]);
  }
}

/**
 * Implements hook_metatags_alter().
 */
function beliana_base_metatags_alter(array &$metatags, array $context): void {
  if (is_domain_en()) {
    // set metags no index, no follow
    $metatags['robots'] = 'noindex, nofollow';
  }
  if (is_domain_school()) {
    $metatags['description'] = t('Školská verzia Encyclopaedie Beliany, ktorá prináša spracovanie encyklopedických hesiel z matematiky a fyziky na úrovni učiva stredných škôl.');
  }
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return \null[][][]
 */
function beliana_base_theme($existing, $type, $theme, $path): array {
  return [
    'view_truncate_options' => [
      'variables' => [],
      'template' => 'view-truncate-options',
    ],
    'view_sort_options' => [
      'variables' => [
        'sort_option_active_link' => NULL,
        'sort_option_links' => NULL,
      ],
      'template' => 'view-sort-options',
    ],
    'info_popup_block' => [
      'variables' => [
        'prod_url' => NULL,
      ],
      'template' => 'info-popup-block',
    ],
  ];
}

/**
 * Implements hook_node_access().
 */
function beliana_base_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $langcode = Drupal::languageManager()->getCurrentLanguage()->getId();
  if (!$node->hasTranslation($langcode)) {
    $access = AccessResult::forbidden();
  }
  else {
    $access = AccessResult::neutral();
  }
  //  $access->addCacheableDependency($node);

  return $access;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function beliana_base_preprocess_links__language_block(&$variables): void {
  if (isset($variables['links'])) {
    $config = Drupal::configFactory()->get('language.negotiation');
    $domains = $config->get('url.domains');

    // Go through each link present in the output and change it's title.
    foreach ($variables['links'] as $link_langcode => $link) {
      $variables['links'][$link_langcode]['link'] = new Link($link_langcode, Url::fromUri('https://' . $domains[$link_langcode]));
    }
  }
}

/**
 * Implementation of hook_node_grants().
 */
function beliana_base_node_grants(AccountInterface $account, $op): array {
  $grants = [];

  if ($op == 'view') {
    $grants['beliana_base_school_grants'] = [intval(is_domain_school())];
  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function beliana_base_node_access_records(NodeInterface $node) {
  $records = [];

  // Check if the node has the boolean parameter set to TRUE.
  if ($node->hasField('field_is_school') && $node->get('field_is_school')->value) {
    // Grant access for users with certain permissions.
    $records[] = [
      'realm' => 'beliana_base_school_grants',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
    ];
  }
  else {
    $records[] = [
      'realm' => 'beliana_base_school_grants',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
    ];
  }

  return $records;
}

/**
 * @return bool
 */
function is_domain_school(): bool {
  $domain = explode('.', Drupal::request()->getHost())[0];

  return (FALSE !== strpos($domain, 'skola'));
}

/**
 * @return bool
 */
function is_domain_en(): bool {
  $domain = explode('.', Drupal::request()->getHost())[0];

  return (FALSE !== strpos($domain, 'en'));
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function beliana_base_node_view(array &$build, Drupal\Core\Entity\EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'word' && $view_mode == 'full') {
    if (preg_match('/math-tex/', $entity->get('body')->value)) {
      $build['#attached']['library'][] = 'bel/word.mathjax';
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function beliana_base_media_view(array &$build, Drupal\Core\Entity\EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if ($entity->getEntityTypeId() == 'media') {
    if ($view_mode == 'full' || $view_mode == 'in_word' || $view_mode == 'conetnt') {
      if (preg_match('/math-tex/', $entity->get('field_description')->value)) {
        $build['#attached']['library'][] = 'bel/word.mathjax';
      }
    }
  }
}

/**
 * Implements hook_views_pre_build().
 */
function beliana_base_views_pre_build(ViewExecutable $view) {
  if ($view->id() == 'solr_search_word' && ($view->current_display == 'page_alphabet' || $view->current_display == 'page_search_by_category')) {
    $view->element['#attached']['library'][] = 'bel/word.mathjax';
  }
}


/**
 * Implements hook_entity_view().
 *
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param $view_mode
 */
function beliana_base_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if ($entity->bundle() === 'word' && $view_mode === 'full') {
    if (!empty($build['body'][0]['#text'])) {
      $body = $build['body'][0]['#text'];
      $images = &$build['field_images'];

      // Check if the body contains any of the tokens
      if (preg_match('/\[(IMG|IMGX|MIMG|MIMGX)-\d+\]/', $body)) {
        $images_to_hide = [];

        // Process MIMG and MIMGX tags
        $body = process_image_tags($body, $images, $images_to_hide, 'MIMG');

        // Process IMG and IMGX tags
        $body = process_image_tags($body, $images, $images_to_hide, 'IMG');

        // Process images
        process_images($images, $images_to_hide, $build);

        $build['body'][0]['#text'] = $body;
        $build["body"][0]["#format"] = "full_html";
      }
    }
  }
}

/**
 * Process image tags in the body text.
 *
 * @param string $body
 * @param array $images
 * @param array $images_to_hide
 * @param string $tag_prefix
 * @return string
 */
function process_image_tags(string $body, array &$images, array &$images_to_hide, string $tag_prefix): string {
  return preg_replace_callback('/\[' . $tag_prefix . '(X?)-(\d+)\]/', function ($matches) use (&$images, &$images_to_hide, $tag_prefix, $body) {
    $image_index = intval($matches[2]) - 1;

    if (isset($images[$image_index])) {
      $media = Media::load($images[$image_index]['#media']->id());
      if ($media && $media->bundle() === 'image') {
        // Invalidate cache for the media entity
        \Drupal::service('cache_tags.invalidator')->invalidateTags(['media:' . $media->id()]);

        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');
        $render_array = $view_builder->view($media, 'in_word');
        $renderer = \Drupal::service('renderer');
        $output = '<div class="' . ($tag_prefix === 'MIMG' ? 'mobile-image' : 'desktop-image') . ($matches[1] ? ' hide-description' : '') . '" data-img-id="' . $image_index . '">'
          . $renderer->render($render_array) .
          '</div>';

        if ($tag_prefix === 'IMG' || preg_match('/data-img-id="' . $image_index . '"/', $body)) {
          $images_to_hide[] = $image_index;
        }

        // Add 'moved' class to the image
        $images[$image_index]['#attributes']['class'][] = 'moved';

        return $output;
      }
    }
    return '';
  }, $body);
}

/**
 * Process images to add classes and cache tags.
 *
 * @param array $images
 * @param array $images_to_hide
 * @param array &$build
 */
function process_images(array &$images, array $images_to_hide, array &$build): void {
  foreach ($images['#items']->getValue() as $index => $image) {
    if (in_array($index, $images_to_hide)) {
      $images[$index]['#attributes']['class'][] = 'mobile-image hidden';
    } else {
      $images[$index]['#attributes']['class'][] = 'desktop-image';
    }

    // Invalidate cache for the images
    $media = Media::load($image['target_id']);
    if ($media) {
      \Drupal::service('cache_tags.invalidator')->invalidateTags(['media:' . $media->id()]);
      $build['#cache']['tags'][] = 'media:' . $media->id();
    }
  }
}
