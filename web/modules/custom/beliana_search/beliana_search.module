<?php

/**
 * @file
 */
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Implements hook_entity_extra_field_info
 */
function beliana_search_entity_extra_field_info() {
    $extra = [];

    $extra['node']['word']['display']['similar_words'] = [
        'label' => t('Similar words'),
        'weight' => 0,
        'visible' => TRUE,
    ];

    return $extra;
}

/**
 * Implements hook_node_insert
 */
function beliana_search_node_insert(EntityInterface $entity) {
    // use cache tags instead
    //drupal_flush_all_caches();
}

/**
 * Implements hook_ENTITY_TYPE_view
 */
function beliana_search_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
    if ($display->getComponent('similar_words')) {
        $args = [$entity->label()];
        $view = Views::getView('solr_search_word');

        if (is_object($view)) {
            $view->setArguments($args);
            $view->setDisplay('embed');
            $view->preExecute();
            $view->execute();

            if(count($view->result) > 0) {
                $build['similar_words'] = $view->buildRenderable('embed', $args);
            }
        }
    }
}

/**
 * Implements hook_views_pre_render
 */
function beliana_search_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'solr_search_word' && ($view->current_display == 'page_alphabet' || $view->current_display == 'page_search_by_category')) {
    $query = \Drupal::request()->query->all();
    if (empty($query['text']) && empty($query['f'])) {
      $view->result = [];
      $view->header['result']->options = [];
      $view->pager = [];

      if ($view->current_display == 'page_search_by_category') {
        $view->empty['area_text_custom']->options['content'] = t('label-select-the-category/categories-in-the-categories-list');
      }
    }
  }
  if ($view->id() == 'solr_search_word' && $view->current_display == 'page_search_by_category') {
    $entity_manager = \Drupal::entityTypeManager();
    $query = \Drupal::request()->query->all();

    if (isset($query['f']) && !empty($query['f'])) {
      $tree = [];

      foreach ($query['f'] as $filter) {
        $parse = explode(':', $filter);

        if ($parse[0] == 'kategorie') {
          if ($term = $entity_manager->getStorage('taxonomy_term')->load($parse[1])) {
            $depth = 0;
            $ancestors = $entity_manager->getStorage('taxonomy_term')->loadAllParents($term->id());
            $parents = array_reverse($ancestors);
            $keys = array_reverse(array_keys($ancestors));

            foreach ($parents as $parent) {
              $item = ['name' => $parent->get('name')->value];

              switch ($depth) {
                case 0:
                  if (!isset($tree[$keys[0]])) {
                    $tree[$keys[0]] = $item;
                  }
                  break;
                case 1:
                  if (!isset($tree[$keys[0]]['child'][$keys[1]])) {
                    $tree[$keys[0]]['child'][$keys[1]] = $item;
                  }
                  break;
                case 2:
                  if (!isset($tree[$keys[0]]['child'][$keys[1]]['child'][$keys[2]])) {
                    $tree[$keys[0]]['child'][$keys[1]]['child'][$keys[2]] = $item;
                  }
                  break;
                case 3:
                  if (!isset($tree[$keys[0]]['child'][$keys[1]]['child'][$keys[2]]['child'][$keys[3]])) {
                    $tree[$keys[0]]['child'][$keys[1]]['child'][$keys[2]]['child'][$keys[3]] = $item;
                  }
                  break;
              }

              $depth++;
            }
          }
        }
      }

      $title = $view->getTitle();

      if (!empty($tree)) {
        $title .= ': ';

        foreach ($tree as $tree_item) {
          $subtitle = $tree_item['name'];

          if (isset($tree_item['child'])) {
            $subtitle .= ' â€“ ' . _beliana_search_build_search_labels($tree_item['child']);
          }

          if (substr($subtitle, -2) == ', ') {
            $subtitle = substr($subtitle, 0, -2);
          }

          $title .= $subtitle . ', ';
        }

        if (substr($title, -2) == ', ') {
          $title = substr($title, 0, -2);
        }

        $view->setTitle($title);
      }
    }
  }
}

function _beliana_search_build_search_labels($tree) {
  $subtitle = '';

  foreach ($tree as $tree_item) {
    $subtitle .= $tree_item['name'];

    if (isset($tree_item['child'])) {
      $subtitle .= ' - ' . _beliana_search_build_search_labels($tree_item['child']);
    }
    else {
      $subtitle .= ', ';
    }
  }

  return $subtitle;
}
